{"version":3,"sources":["../../test/testFile.js"],"names":[],"mappings":"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","file":"testFile.js","sourcesContent":["import {expect} from 'chai'\nimport {List, Map, fromJS} from 'immutable'\nimport {describe, it} from 'mocha'\nlet mlog = require('mocha-logger')\nlet log = mlog.log;\nimport {setEntries, next, vote} from '../src/core';\n\ndescribe('immutablilty => ', (done) => {\n\n    describe('setEntries', () => {\n        it('creates a tally for the voted entry', () => {\n            const state = Map({\n                vote: Map({\n                    pair: List.of('movie1', 'movie2')\n                }),\n                entries: List()\n            });\n            const nextState = vote(state.get('vote'), 'movie1');\n\n            let expectedResult = fromJS({\n                pair: List.of('movie1', 'movie2'),\n                tally: Map({\n                    'movie1': 1\n                })\n            });\n\n            log('initial state =>', state.toString())\n            log('expected result =>', expectedResult.toString())\n            log('returned result =>', nextState.toString())\n            log('equal : ', nextState.equals(expectedResult))\n\n            expect(nextState.equals(expectedResult)).to.equal(true)\n        });\n\n        it('adds to existing tally for the voted entry', () => {\n            const state = Map({\n                vote: Map({\n                    pair: List.of('movie1', 'movie2'),\n                    tally: Map({\n                        'movie1': 3,\n                        'movie2': 2\n                    })\n                }),\n                entries: List()\n            });\n            const nextState = vote(state.get('vote'), 'movie1');\n            let expectedResult = Map({\n                pair: List.of('movie1', 'movie2'),\n                tally: Map({\n                    'movie1': 4,\n                    'movie2': 2\n                })\n            })\n\n            log('actual result   =>', state.toString())\n            log('expected result =>', expectedResult.toString())\n            log('returned result =>', nextState.toString())\n            log('equal : ', nextState.equals(expectedResult))\n\n            expect(nextState.equals(expectedResult)).to.equal(true);\n        });\n\n        it('adds the entries to the state', () => {\n            const state = Map();\n            const entries = List.of('movie1', 'movie2');\n\n            log(entries.toString())\n            const nextState = setEntries(state, entries);\n            log(nextState.toString())\n            let expectedResult = Map({\n                entries: List.of('movie1', 'movie2')\n            })\n            log(expectedResult.toString())\n            expect(nextState.equals(expectedResult)).to.equal(true);\n        });\n\n        it('get the next state ', () => {\n            const state = Map();\n            const entries = List.of('movie1', 'movie2', 'movie3');\n            const firstState = setEntries(state, entries);\n            log('second state')\n            log(firstState.toString())\n\n            const secondState = next(firstState);\n            log('second state')\n            log(secondState.toString())\n            let expectedResult = Map({\n                vote: Map({\n                    pair: List.of('movie1', 'movie2')\n                }),\n                entries: List.of('movie3')\n            })\n            log('expected state')\n            log(expectedResult.toString())\n            expect(secondState.equals(expectedResult)).to.equal(true);\n        });\n\n\n    });\n\n    describe('list', (done) => {\n        function addMovie(currentState, movie) {\n            return currentState.push(movie)\n        }\n        it('is immutable', (done) => {\n            let moviesState = List.of('Transporting', 'Mad max')\n            let nextState = addMovie(moviesState, 'sunshine')\n            expect(moviesState.size).to.equal(2)\n            expect(nextState.size).to.equal(3)\n            done()\n        })\n    })\n\n    describe('tree', (done) => {\n        function addMovie(currentState, item) {\n            log('current state ==>' + currentState.get('movies'))\n            return currentState.update('movies', movies => movies.push(item))\n        }\n\n\n        it('is immutable', (done) => {\n            let state = Map({\n                movies: List.of('movie1', 'movie2')\n            });\n            let nextState = addMovie(state, 'movie3')\n\n            log(state.toString());\n            expect(state.get('movies').size).to.equal(2)\n            log(nextState.toString())\n            expect(nextState.get('movies').size).to.equal(3)\n            done()\n        })\n    })\n\n});\n"]}