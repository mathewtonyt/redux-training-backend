{"version":3,"sources":["../../../test/reducer/reducer_spec.js"],"names":[],"mappings":";;;;;;;;;;;;AAEA,IAAI,OAAO,QAAQ,cAAR,CAAP;;;;;AAKJ,SAAS,SAAT,EAAoB,YAAM;;AAEtB,OAAG,IAAH,CAAQ,qBAAR,EAA+B,YAAM;AACjC,YAAM,eAAe,qBAAf,CAD2B;AAEjC,YAAM,SAAS,EAAE,MAAM,aAAN,EAAqB,SAAS,CAAC,eAAD,CAAT,EAAhC,CAF2B;AAGjC,aAAK,GAAL,CAAS,sBAAT,EAHiC;AAIjC,YAAM,YAAY,uBAAQ,YAAR,EAAsB,MAAtB,CAAZ,CAJ2B;AAKjC,aAAK,GAAL,CAAS,eAAT,EAA0B,UAAU,QAAV,EAA1B,EALiC;AAMjC,0BAAO,SAAP,EAAkB,EAAlB,CAAqB,KAArB,CAA2B,uBAAO;AAC9B,qBAAS,CAAC,eAAD,CAAT;SADuB,CAA3B,EANiC;KAAN,CAA/B,CAFsB;;AAatB,OAAG,cAAH,EAAmB,YAAM;AACrB,YAAM,eAAe,uBAAO;AACxB,qBAAS,CAAC,eAAD,EAAkB,eAAlB,CAAT;SADiB,CAAf,CADe;AAIrB,YAAM,SAAS,EAAE,MAAM,MAAN,EAAX,CAJe;AAKrB,YAAM,YAAY,uBAAQ,YAAR,EAAsB,MAAtB,CAAZ,CALe;;AAOrB,0BAAO,SAAP,EAAkB,EAAlB,CAAqB,KAArB,CAA2B,uBAAO;AAC9B,kBAAM;AACF,sBAAM,CAAC,eAAD,EAAkB,eAAlB,CAAN;aADJ;AAGA,qBAAS,EAAT;SAJuB,CAA3B,EAPqB;KAAN,CAAnB,CAbsB;;AA4BtB,OAAG,cAAH,EAAmB,YAAM;AACrB,YAAM,eAAe,uBAAO;AACxB,kBAAM;AACF,sBAAM,CAAC,eAAD,EAAkB,eAAlB,CAAN;aADJ;AAGA,qBAAS,EAAT;SAJiB,CAAf,CADe;AAOrB,YAAM,SAAS,EAAE,MAAM,MAAN,EAAc,OAAO,eAAP,EAAzB,CAPe;AAQrB,YAAM,YAAY,uBAAQ,YAAR,EAAsB,MAAtB,CAAZ,CARe;;AAUrB,0BAAO,SAAP,EAAkB,EAAlB,CAAqB,KAArB,CAA2B,uBAAO;AAC9B,kBAAM;AACF,sBAAM,CAAC,eAAD,EAAkB,eAAlB,CAAN;AACA,uBAAO,EAAE,eAAe,CAAf,EAAT;aAFJ;AAIA,qBAAS,EAAT;SALuB,CAA3B,EAVqB;KAAN,CAAnB,CA5BsB;CAAN,CAApB","file":"reducer_spec.js","sourcesContent":["import {Map, fromJS} from 'immutable'\nimport {expect} from 'chai'\nlet mlog = require('mocha-logger')\nimport reducer from '../../src/reducer'\n\n// mlog.log('reducer object is > ', reducer)\n\ndescribe('reducer', () => {\n\n    it.only('handles SET_ENTRIES', () => {\n        const initialState = Map();\n        const action = { type: 'SET_ENTRIES', entries: ['Trainspotting'] };\n        mlog.log('reacher here in the ')\n        const nextState = reducer(initialState, action);\n        mlog.log('next state > ', nextState.toString())\n        expect(nextState).to.equal(fromJS({\n            entries: ['Trainspotting']\n        }));\n    });\n\n    it('handles NEXT', () => {\n        const initialState = fromJS({\n            entries: ['Trainspotting', '28 Days Later']\n        });\n        const action = { type: 'NEXT' };\n        const nextState = reducer(initialState, action);\n\n        expect(nextState).to.equal(fromJS({\n            vote: {\n                pair: ['Trainspotting', '28 Days Later']\n            },\n            entries: []\n        }));\n    });\n\n    it('handles VOTE', () => {\n        const initialState = fromJS({\n            vote: {\n                pair: ['Trainspotting', '28 Days Later']\n            },\n            entries: []\n        });\n        const action = { type: 'VOTE', entry: 'Trainspotting' };\n        const nextState = reducer(initialState, action);\n\n        expect(nextState).to.equal(fromJS({\n            vote: {\n                pair: ['Trainspotting', '28 Days Later'],\n                tally: { Trainspotting: 1 }\n            },\n            entries: []\n        }));\n    });\n\n});"]}