{"version":3,"sources":["../test/getnextPair.js"],"names":[],"mappings":";;;;;;;;;;AAGA,IAAI,OAAO,QAAQ,cAAR,CAAP;AACJ,IAAI,MAAM,KAAK,GAAL;;;AAGV,qBAAS,kBAAT,EAA6B,UAAC,IAAD,EAAU;;AAEnC,yBAAS,MAAT,EAAiB,YAAM;;AAEnB,kBAAG,IAAH,CAAQ,6CAAR,EAAuD,YAAM;AACzD,gBAAM,QAAQ,oBAAI;AACd,sBAAM,oBAAI;AACN,0BAAM,gBAAK,EAAL,CAAQ,eAAR,EAAyB,eAAzB,CAAN;AACA,2BAAO,oBAAI;AACP,yCAAiB,CAAjB;AACA,yCAAiB,CAAjB;qBAFG,CAAP;iBAFE,CAAN;AAOA,yBAAS,gBAAK,EAAL,CAAQ,UAAR,EAAoB,UAApB,EAAgC,WAAhC,CAAT;aARU,CAAR,CADmD;AAWzD,gBAAM,YAAY,gBAAK,KAAL,CAAZ,CAXmD;AAYzD,gBAAM,SAAS,oBAAI;AACf,sBAAM,oBAAI;AACN,0BAAM,gBAAK,EAAL,CAAQ,UAAR,EAAoB,UAApB,CAAN;iBADE,CAAN;AAGA,yBAAS,gBAAK,EAAL,CAAQ,WAAR,EAAqB,eAArB,CAAT;aAJW,CAAT,CAZmD;AAkBzD,gBAAI,qBAAJ,EAA2B,UAAU,QAAV,EAA3B,EAlByD;AAmBzD,gBAAI,qBAAJ,EAA0B,OAAO,QAAP,EAA1B,EAnByD;AAoBzD,8BAAO,UAAU,MAAV,CAAiB,MAAjB,CAAP,EAAiC,EAAjC,CAAoC,KAApC,CAA0C,IAA1C,EApByD;SAAN,CAAvD,CAFmB;;AAyBnB,uBAAG,0CAAH,EAA+C,YAAM;AACjD,gBAAM,QAAQ,oBAAI;AACd,sBAAM,oBAAI;AACN,0BAAM,gBAAK,EAAL,CAAQ,eAAR,EAAyB,eAAzB,CAAN;AACA,2BAAO,oBAAI;AACP,yCAAiB,CAAjB;AACA,yCAAiB,CAAjB;qBAFG,CAAP;iBAFE,CAAN;AAOA,yBAAS,gBAAK,EAAL,CAAQ,UAAR,EAAoB,UAApB,EAAgC,WAAhC,CAAT;aARU,CAAR,CAD2C;AAWjD,gBAAM,YAAY,gBAAK,KAAL,CAAZ,CAX2C;AAYjD,8BAAO,SAAP,EAAkB,EAAlB,CAAqB,KAArB,CAA2B,oBAAI;AAC3B,sBAAM,oBAAI;AACN,0BAAM,gBAAK,EAAL,CAAQ,UAAR,EAAoB,UAApB,CAAN;iBADE,CAAN;AAGA,yBAAS,gBAAK,EAAL,CAAQ,WAAR,EAAqB,eAArB,EAAsC,eAAtC,CAAT;aAJuB,CAA3B,EAZiD;SAAN,CAA/C,CAzBmB;KAAN,CAAjB,CAFmC;CAAV,CAA7B","file":"getnextPair.js","sourcesContent":["import {expect} from 'chai'\nimport {List, Map} from 'immutable'\nimport {describe, it} from 'mocha'\nlet mlog = require('mocha-logger')\nlet log = mlog.log;\nimport {setEntries, next, vote} from '../src/core';\n\ndescribe('immutablilty => ', (done) => {\n\n    describe('next', () => {\n\n        it.only('puts winner of current vote back to entries', () => {\n            const state = Map({\n                vote: Map({\n                    pair: List.of('Trainspotting', '28 Days Later'),\n                    tally: Map({\n                        'Trainspotting': 4,\n                        '28 Days Later': 2\n                    })\n                }),\n                entries: List.of('Sunshine', 'Millions', '127 Hours')\n            });\n            const nextState = next(state);\n            const result = Map({\n                vote: Map({\n                    pair: List.of('Sunshine', 'Millions')\n                }),\n                entries: List.of('127 Hours', 'Trainspotting')\n            })\n            log('returned value ===>', nextState.toString())\n            log('expected result ==>',result.toString())\n            expect(nextState.equals(result)).to.equal(true);\n        });\n\n        it('puts both from tied vote back to entries', () => {\n            const state = Map({\n                vote: Map({\n                    pair: List.of('Trainspotting', '28 Days Later'),\n                    tally: Map({\n                        'Trainspotting': 3,\n                        '28 Days Later': 3\n                    })\n                }),\n                entries: List.of('Sunshine', 'Millions', '127 Hours')\n            });\n            const nextState = next(state);\n            expect(nextState).to.equal(Map({\n                vote: Map({\n                    pair: List.of('Sunshine', 'Millions')\n                }),\n                entries: List.of('127 Hours', 'Trainspotting', '28 Days Later')\n            }));\n        });\n\n    });\n\n});\n"]}