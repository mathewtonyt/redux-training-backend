{"version":3,"sources":["../../src/core.js"],"names":[],"mappings":";;;;;;;;;QAMgB;QAQA;QAgBA;;;;AA7BhB,IAAI,OAAO,QAAQ,cAAR,CAAP;AACJ,IAAI,MAAM,KAAK,GAAL;;AAEH,IAAM,wCAAgB,qBAAhB;;AAEN,SAAS,IAAT,CAAc,KAAd,EAAqB,KAArB,EAA4B;AAC/B,WAAO,MAAM,QAAN,CACH,CAAC,OAAD,EAAU,KAAV,CADG,EAEH,CAFG,EAGH;eAAS,QAAQ,CAAR;KAAT,CAHJ,CAD+B;CAA5B;;AAQA,SAAS,UAAT,CAAoB,KAApB,EAA2B,OAA3B,EAAoC;AACvC,QAAI,4BAAJ,EAAkC,MAAM,QAAN,EAAlC,EADuC;AAEvC,WAAO,MAAM,GAAN,CAAU,SAAV,EAAqB,uBAAO,OAAP,CAArB,CAAP,CAFuC;CAApC;;AAMP,SAAS,UAAT,CAAoB,IAApB,EAA0B;AACtB,QAAI,CAAC,IAAD,EAAO,OAAO,EAAP,CAAX;;oBACe,KAAK,GAAL,CAAS,MAAT,EAFO;;;;QAEf,kBAFe;QAEZ,kBAFY;;AAGtB,QAAM,SAAS,KAAK,KAAL,CAAW,CAAC,OAAD,EAAU,CAAV,CAAX,EAAyB,CAAzB,CAAT,CAHgB;AAItB,QAAM,SAAS,KAAK,KAAL,CAAW,CAAC,OAAD,EAAU,CAAV,CAAX,EAAyB,CAAzB,CAAT,CAJgB;AAKtB,QAAI,SAAS,MAAT,EAAiB,OAAO,CAAC,CAAD,CAAP,CAArB,KACK,IAAI,SAAS,MAAT,EAAiB,OAAO,CAAC,CAAD,CAAP,CAArB,KACA,OAAO,CAAC,CAAD,EAAI,CAAJ,CAAP,CADA;CANT;;AAUO,SAAS,IAAT,CAAc,KAAd,EAAqB;AAC1B,QAAM,UAAU,MAAM,GAAN,CAAU,SAAV,EACM,MADN,CACa,WAAW,MAAM,GAAN,CAAU,MAAV,CAAX,CADb,CAAV,CADoB;AAG1B,QAAI,QAAQ,IAAR,KAAiB,CAAjB,EAAoB;AACtB,eAAO,MAAM,MAAN,CAAa,MAAb,EACM,MADN,CACa,SADb,EAEF,GAFE,CAEE,QAFF,EAEY,QAAQ,KAAR,EAFZ,CAAP,CADsB;KAAxB,MAIO;AACL,eAAO,MAAM,KAAN,CAAY;AACjB,kBAAM,oBAAI,EAAC,MAAM,QAAQ,IAAR,CAAa,CAAb,CAAN,EAAL,CAAN;AACA,qBAAS,QAAQ,IAAR,CAAa,CAAb,CAAT;SAFK,CAAP,CADK;KAJP;CAHK","file":"core.js","sourcesContent":["import {List, Map, fromJS} from 'immutable';\nlet mlog = require('mocha-logger')\nlet log = mlog.log;\n\nexport const INITIAL_STATE = Map();\n\nexport function vote(state, movie) {\n    return state.updateIn(\n        ['tally', movie],\n        0,\n        tally => tally + 1\n    );\n}\n\nexport function setEntries(state, entries) {\n    log('reached instide the corejs', state.toString())\n    return state.set('entries', fromJS(entries));\n}\n\n\nfunction getWinners(vote) {\n    if (!vote) return [];\n    const [a, b] = vote.get('pair');\n    const aVotes = vote.getIn(['tally', a], 0);\n    const bVotes = vote.getIn(['tally', b], 0);\n    if (aVotes > bVotes) return [a];\n    else if (aVotes < bVotes) return [b];\n    else return [a, b];\n}\n\nexport function next(state) {\n  const entries = state.get('entries')\n                       .concat(getWinners(state.get('vote')));\n  if (entries.size === 1) {\n    return state.remove('vote')\n                .remove('entries')\n        .set('winner', entries.first());\n  } else {\n    return state.merge({\n      vote: Map({pair: entries.take(2)}),\n      entries: entries.skip(2)\n    });\n  }\n}"]}